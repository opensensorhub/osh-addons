/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE AIRSPEEDS PACKING
package com.MAVLink.matrixpilot;

import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.Description;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
import com.MAVLink.Messages.Units;

/**
 * The airspeed measured by sensors and IMU
 */
public class msg_airspeeds extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_AIRSPEEDS = 182;
    public static final int MAVLINK_MSG_LENGTH = 16;
    private static final long serialVersionUID = MAVLINK_MSG_ID_AIRSPEEDS;

    
    /**
     * Timestamp (milliseconds since system boot)
     */
    @Description("Timestamp (milliseconds since system boot)")
    @Units("")
    public long time_boot_ms;
    
    /**
     * Airspeed estimate from IMU, cm/s
     */
    @Description("Airspeed estimate from IMU, cm/s")
    @Units("")
    public short airspeed_imu;
    
    /**
     * Pitot measured forward airpseed, cm/s
     */
    @Description("Pitot measured forward airpseed, cm/s")
    @Units("")
    public short airspeed_pitot;
    
    /**
     * Hot wire anenometer measured airspeed, cm/s
     */
    @Description("Hot wire anenometer measured airspeed, cm/s")
    @Units("")
    public short airspeed_hot_wire;
    
    /**
     * Ultrasonic measured airspeed, cm/s
     */
    @Description("Ultrasonic measured airspeed, cm/s")
    @Units("")
    public short airspeed_ultrasonic;
    
    /**
     * Angle of attack sensor, degrees * 10
     */
    @Description("Angle of attack sensor, degrees * 10")
    @Units("")
    public short aoa;
    
    /**
     * Yaw angle sensor, degrees * 10
     */
    @Description("Yaw angle sensor, degrees * 10")
    @Units("")
    public short aoy;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = sysid;
        packet.compid = compid;
        packet.msgid = MAVLINK_MSG_ID_AIRSPEEDS;

        packet.payload.putUnsignedInt(time_boot_ms);
        packet.payload.putShort(airspeed_imu);
        packet.payload.putShort(airspeed_pitot);
        packet.payload.putShort(airspeed_hot_wire);
        packet.payload.putShort(airspeed_ultrasonic);
        packet.payload.putShort(aoa);
        packet.payload.putShort(aoy);
        
        if (isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a airspeeds message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();

        this.time_boot_ms = payload.getUnsignedInt();
        this.airspeed_imu = payload.getShort();
        this.airspeed_pitot = payload.getShort();
        this.airspeed_hot_wire = payload.getShort();
        this.airspeed_ultrasonic = payload.getShort();
        this.aoa = payload.getShort();
        this.aoy = payload.getShort();
        
        if (isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_airspeeds() {
        this.msgid = MAVLINK_MSG_ID_AIRSPEEDS;
    }

    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_airspeeds( long time_boot_ms, short airspeed_imu, short airspeed_pitot, short airspeed_hot_wire, short airspeed_ultrasonic, short aoa, short aoy) {
        this.msgid = MAVLINK_MSG_ID_AIRSPEEDS;

        this.time_boot_ms = time_boot_ms;
        this.airspeed_imu = airspeed_imu;
        this.airspeed_pitot = airspeed_pitot;
        this.airspeed_hot_wire = airspeed_hot_wire;
        this.airspeed_ultrasonic = airspeed_ultrasonic;
        this.aoa = aoa;
        this.aoy = aoy;
        
    }

    /**
     * Constructor for a new message, initializes everything
     */
    public msg_airspeeds( long time_boot_ms, short airspeed_imu, short airspeed_pitot, short airspeed_hot_wire, short airspeed_ultrasonic, short aoa, short aoy, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_AIRSPEEDS;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.time_boot_ms = time_boot_ms;
        this.airspeed_imu = airspeed_imu;
        this.airspeed_pitot = airspeed_pitot;
        this.airspeed_hot_wire = airspeed_hot_wire;
        this.airspeed_ultrasonic = airspeed_ultrasonic;
        this.aoa = aoa;
        this.aoy = aoy;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_airspeeds(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_AIRSPEEDS;

        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

                  
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_AIRSPEEDS - sysid:"+sysid+" compid:"+compid+" time_boot_ms:"+time_boot_ms+" airspeed_imu:"+airspeed_imu+" airspeed_pitot:"+airspeed_pitot+" airspeed_hot_wire:"+airspeed_hot_wire+" airspeed_ultrasonic:"+airspeed_ultrasonic+" aoa:"+aoa+" aoy:"+aoy+"";
    }

    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_AIRSPEEDS";
    }
}
        