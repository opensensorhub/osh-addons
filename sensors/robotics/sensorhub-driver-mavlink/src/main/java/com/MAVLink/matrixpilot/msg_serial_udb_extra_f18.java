/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE SERIAL_UDB_EXTRA_F18 PACKING
package com.MAVLink.matrixpilot;

import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.Description;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
import com.MAVLink.Messages.Units;

/**
 * Backwards compatible version of SERIAL_UDB_EXTRA F18 format
 */
public class msg_serial_udb_extra_f18 extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_SERIAL_UDB_EXTRA_F18 = 184;
    public static final int MAVLINK_MSG_LENGTH = 20;
    private static final long serialVersionUID = MAVLINK_MSG_ID_SERIAL_UDB_EXTRA_F18;

    
    /**
     * SUE Angle of Attack Normal
     */
    @Description("SUE Angle of Attack Normal")
    @Units("")
    public float angle_of_attack_normal;
    
    /**
     * SUE Angle of Attack Inverted
     */
    @Description("SUE Angle of Attack Inverted")
    @Units("")
    public float angle_of_attack_inverted;
    
    /**
     * SUE Elevator Trim Normal
     */
    @Description("SUE Elevator Trim Normal")
    @Units("")
    public float elevator_trim_normal;
    
    /**
     * SUE Elevator Trim Inverted
     */
    @Description("SUE Elevator Trim Inverted")
    @Units("")
    public float elevator_trim_inverted;
    
    /**
     * SUE reference_speed
     */
    @Description("SUE reference_speed")
    @Units("")
    public float reference_speed;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = sysid;
        packet.compid = compid;
        packet.msgid = MAVLINK_MSG_ID_SERIAL_UDB_EXTRA_F18;

        packet.payload.putFloat(angle_of_attack_normal);
        packet.payload.putFloat(angle_of_attack_inverted);
        packet.payload.putFloat(elevator_trim_normal);
        packet.payload.putFloat(elevator_trim_inverted);
        packet.payload.putFloat(reference_speed);
        
        if (isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a serial_udb_extra_f18 message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();

        this.angle_of_attack_normal = payload.getFloat();
        this.angle_of_attack_inverted = payload.getFloat();
        this.elevator_trim_normal = payload.getFloat();
        this.elevator_trim_inverted = payload.getFloat();
        this.reference_speed = payload.getFloat();
        
        if (isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_serial_udb_extra_f18() {
        this.msgid = MAVLINK_MSG_ID_SERIAL_UDB_EXTRA_F18;
    }

    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_serial_udb_extra_f18( float angle_of_attack_normal, float angle_of_attack_inverted, float elevator_trim_normal, float elevator_trim_inverted, float reference_speed) {
        this.msgid = MAVLINK_MSG_ID_SERIAL_UDB_EXTRA_F18;

        this.angle_of_attack_normal = angle_of_attack_normal;
        this.angle_of_attack_inverted = angle_of_attack_inverted;
        this.elevator_trim_normal = elevator_trim_normal;
        this.elevator_trim_inverted = elevator_trim_inverted;
        this.reference_speed = reference_speed;
        
    }

    /**
     * Constructor for a new message, initializes everything
     */
    public msg_serial_udb_extra_f18( float angle_of_attack_normal, float angle_of_attack_inverted, float elevator_trim_normal, float elevator_trim_inverted, float reference_speed, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_SERIAL_UDB_EXTRA_F18;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.angle_of_attack_normal = angle_of_attack_normal;
        this.angle_of_attack_inverted = angle_of_attack_inverted;
        this.elevator_trim_normal = elevator_trim_normal;
        this.elevator_trim_inverted = elevator_trim_inverted;
        this.reference_speed = reference_speed;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_serial_udb_extra_f18(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_SERIAL_UDB_EXTRA_F18;

        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

              
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_SERIAL_UDB_EXTRA_F18 - sysid:"+sysid+" compid:"+compid+" angle_of_attack_normal:"+angle_of_attack_normal+" angle_of_attack_inverted:"+angle_of_attack_inverted+" elevator_trim_normal:"+elevator_trim_normal+" elevator_trim_inverted:"+elevator_trim_inverted+" reference_speed:"+reference_speed+"";
    }

    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_SERIAL_UDB_EXTRA_F18";
    }
}
        