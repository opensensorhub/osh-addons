/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE AVAILABLE_MODES_MONITOR PACKING
package com.MAVLink.development;

import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.Description;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
import com.MAVLink.Messages.Units;

/**
 * A change to the sequence number indicates that the set of AVAILABLE_MODES has changed.
        A receiver must re-request all available modes whenever the sequence number changes.
        This is only emitted after the first change and should then be broadcast at low rate (nominally 0.3 Hz) and on change.
      
 */
public class msg_available_modes_monitor extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_AVAILABLE_MODES_MONITOR = 437;
    public static final int MAVLINK_MSG_LENGTH = 1;
    private static final long serialVersionUID = MAVLINK_MSG_ID_AVAILABLE_MODES_MONITOR;

    
    /**
     * Sequence number. The value iterates sequentially whenever AVAILABLE_MODES changes (e.g. support for a new mode is added/removed dynamically).
     */
    @Description("Sequence number. The value iterates sequentially whenever AVAILABLE_MODES changes (e.g. support for a new mode is added/removed dynamically).")
    @Units("")
    public short seq;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = sysid;
        packet.compid = compid;
        packet.msgid = MAVLINK_MSG_ID_AVAILABLE_MODES_MONITOR;

        packet.payload.putUnsignedByte(seq);
        
        if (isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a available_modes_monitor message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();

        this.seq = payload.getUnsignedByte();
        
        if (isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_available_modes_monitor() {
        this.msgid = MAVLINK_MSG_ID_AVAILABLE_MODES_MONITOR;
    }

    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_available_modes_monitor( short seq) {
        this.msgid = MAVLINK_MSG_ID_AVAILABLE_MODES_MONITOR;

        this.seq = seq;
        
    }

    /**
     * Constructor for a new message, initializes everything
     */
    public msg_available_modes_monitor( short seq, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_AVAILABLE_MODES_MONITOR;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.seq = seq;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_available_modes_monitor(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_AVAILABLE_MODES_MONITOR;

        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

      
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_AVAILABLE_MODES_MONITOR - sysid:"+sysid+" compid:"+compid+" seq:"+seq+"";
    }

    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_AVAILABLE_MODES_MONITOR";
    }
}
        