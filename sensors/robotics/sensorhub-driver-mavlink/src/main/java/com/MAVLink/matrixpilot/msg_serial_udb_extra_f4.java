/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE SERIAL_UDB_EXTRA_F4 PACKING
package com.MAVLink.matrixpilot;

import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.Description;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
import com.MAVLink.Messages.Units;

/**
 * Backwards compatible version of SERIAL_UDB_EXTRA F4: format
 */
public class msg_serial_udb_extra_f4 extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_SERIAL_UDB_EXTRA_F4 = 172;
    public static final int MAVLINK_MSG_LENGTH = 10;
    private static final long serialVersionUID = MAVLINK_MSG_ID_SERIAL_UDB_EXTRA_F4;

    
    /**
     * Serial UDB Extra Roll Stabilization with Ailerons Enabled
     */
    @Description("Serial UDB Extra Roll Stabilization with Ailerons Enabled")
    @Units("")
    public short sue_ROLL_STABILIZATION_AILERONS;
    
    /**
     * Serial UDB Extra Roll Stabilization with Rudder Enabled
     */
    @Description("Serial UDB Extra Roll Stabilization with Rudder Enabled")
    @Units("")
    public short sue_ROLL_STABILIZATION_RUDDER;
    
    /**
     * Serial UDB Extra Pitch Stabilization Enabled
     */
    @Description("Serial UDB Extra Pitch Stabilization Enabled")
    @Units("")
    public short sue_PITCH_STABILIZATION;
    
    /**
     * Serial UDB Extra Yaw Stabilization using Rudder Enabled
     */
    @Description("Serial UDB Extra Yaw Stabilization using Rudder Enabled")
    @Units("")
    public short sue_YAW_STABILIZATION_RUDDER;
    
    /**
     * Serial UDB Extra Yaw Stabilization using Ailerons Enabled
     */
    @Description("Serial UDB Extra Yaw Stabilization using Ailerons Enabled")
    @Units("")
    public short sue_YAW_STABILIZATION_AILERON;
    
    /**
     * Serial UDB Extra Navigation with Ailerons Enabled
     */
    @Description("Serial UDB Extra Navigation with Ailerons Enabled")
    @Units("")
    public short sue_AILERON_NAVIGATION;
    
    /**
     * Serial UDB Extra Navigation with Rudder Enabled
     */
    @Description("Serial UDB Extra Navigation with Rudder Enabled")
    @Units("")
    public short sue_RUDDER_NAVIGATION;
    
    /**
     * Serial UDB Extra Type of Alitude Hold when in Stabilized Mode
     */
    @Description("Serial UDB Extra Type of Alitude Hold when in Stabilized Mode")
    @Units("")
    public short sue_ALTITUDEHOLD_STABILIZED;
    
    /**
     * Serial UDB Extra Type of Alitude Hold when in Waypoint Mode
     */
    @Description("Serial UDB Extra Type of Alitude Hold when in Waypoint Mode")
    @Units("")
    public short sue_ALTITUDEHOLD_WAYPOINT;
    
    /**
     * Serial UDB Extra Firmware racing mode enabled
     */
    @Description("Serial UDB Extra Firmware racing mode enabled")
    @Units("")
    public short sue_RACING_MODE;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = sysid;
        packet.compid = compid;
        packet.msgid = MAVLINK_MSG_ID_SERIAL_UDB_EXTRA_F4;

        packet.payload.putUnsignedByte(sue_ROLL_STABILIZATION_AILERONS);
        packet.payload.putUnsignedByte(sue_ROLL_STABILIZATION_RUDDER);
        packet.payload.putUnsignedByte(sue_PITCH_STABILIZATION);
        packet.payload.putUnsignedByte(sue_YAW_STABILIZATION_RUDDER);
        packet.payload.putUnsignedByte(sue_YAW_STABILIZATION_AILERON);
        packet.payload.putUnsignedByte(sue_AILERON_NAVIGATION);
        packet.payload.putUnsignedByte(sue_RUDDER_NAVIGATION);
        packet.payload.putUnsignedByte(sue_ALTITUDEHOLD_STABILIZED);
        packet.payload.putUnsignedByte(sue_ALTITUDEHOLD_WAYPOINT);
        packet.payload.putUnsignedByte(sue_RACING_MODE);
        
        if (isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a serial_udb_extra_f4 message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();

        this.sue_ROLL_STABILIZATION_AILERONS = payload.getUnsignedByte();
        this.sue_ROLL_STABILIZATION_RUDDER = payload.getUnsignedByte();
        this.sue_PITCH_STABILIZATION = payload.getUnsignedByte();
        this.sue_YAW_STABILIZATION_RUDDER = payload.getUnsignedByte();
        this.sue_YAW_STABILIZATION_AILERON = payload.getUnsignedByte();
        this.sue_AILERON_NAVIGATION = payload.getUnsignedByte();
        this.sue_RUDDER_NAVIGATION = payload.getUnsignedByte();
        this.sue_ALTITUDEHOLD_STABILIZED = payload.getUnsignedByte();
        this.sue_ALTITUDEHOLD_WAYPOINT = payload.getUnsignedByte();
        this.sue_RACING_MODE = payload.getUnsignedByte();
        
        if (isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_serial_udb_extra_f4() {
        this.msgid = MAVLINK_MSG_ID_SERIAL_UDB_EXTRA_F4;
    }

    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_serial_udb_extra_f4( short sue_ROLL_STABILIZATION_AILERONS, short sue_ROLL_STABILIZATION_RUDDER, short sue_PITCH_STABILIZATION, short sue_YAW_STABILIZATION_RUDDER, short sue_YAW_STABILIZATION_AILERON, short sue_AILERON_NAVIGATION, short sue_RUDDER_NAVIGATION, short sue_ALTITUDEHOLD_STABILIZED, short sue_ALTITUDEHOLD_WAYPOINT, short sue_RACING_MODE) {
        this.msgid = MAVLINK_MSG_ID_SERIAL_UDB_EXTRA_F4;

        this.sue_ROLL_STABILIZATION_AILERONS = sue_ROLL_STABILIZATION_AILERONS;
        this.sue_ROLL_STABILIZATION_RUDDER = sue_ROLL_STABILIZATION_RUDDER;
        this.sue_PITCH_STABILIZATION = sue_PITCH_STABILIZATION;
        this.sue_YAW_STABILIZATION_RUDDER = sue_YAW_STABILIZATION_RUDDER;
        this.sue_YAW_STABILIZATION_AILERON = sue_YAW_STABILIZATION_AILERON;
        this.sue_AILERON_NAVIGATION = sue_AILERON_NAVIGATION;
        this.sue_RUDDER_NAVIGATION = sue_RUDDER_NAVIGATION;
        this.sue_ALTITUDEHOLD_STABILIZED = sue_ALTITUDEHOLD_STABILIZED;
        this.sue_ALTITUDEHOLD_WAYPOINT = sue_ALTITUDEHOLD_WAYPOINT;
        this.sue_RACING_MODE = sue_RACING_MODE;
        
    }

    /**
     * Constructor for a new message, initializes everything
     */
    public msg_serial_udb_extra_f4( short sue_ROLL_STABILIZATION_AILERONS, short sue_ROLL_STABILIZATION_RUDDER, short sue_PITCH_STABILIZATION, short sue_YAW_STABILIZATION_RUDDER, short sue_YAW_STABILIZATION_AILERON, short sue_AILERON_NAVIGATION, short sue_RUDDER_NAVIGATION, short sue_ALTITUDEHOLD_STABILIZED, short sue_ALTITUDEHOLD_WAYPOINT, short sue_RACING_MODE, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_SERIAL_UDB_EXTRA_F4;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.sue_ROLL_STABILIZATION_AILERONS = sue_ROLL_STABILIZATION_AILERONS;
        this.sue_ROLL_STABILIZATION_RUDDER = sue_ROLL_STABILIZATION_RUDDER;
        this.sue_PITCH_STABILIZATION = sue_PITCH_STABILIZATION;
        this.sue_YAW_STABILIZATION_RUDDER = sue_YAW_STABILIZATION_RUDDER;
        this.sue_YAW_STABILIZATION_AILERON = sue_YAW_STABILIZATION_AILERON;
        this.sue_AILERON_NAVIGATION = sue_AILERON_NAVIGATION;
        this.sue_RUDDER_NAVIGATION = sue_RUDDER_NAVIGATION;
        this.sue_ALTITUDEHOLD_STABILIZED = sue_ALTITUDEHOLD_STABILIZED;
        this.sue_ALTITUDEHOLD_WAYPOINT = sue_ALTITUDEHOLD_WAYPOINT;
        this.sue_RACING_MODE = sue_RACING_MODE;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_serial_udb_extra_f4(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_SERIAL_UDB_EXTRA_F4;

        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

                        
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_SERIAL_UDB_EXTRA_F4 - sysid:"+sysid+" compid:"+compid+" sue_ROLL_STABILIZATION_AILERONS:"+sue_ROLL_STABILIZATION_AILERONS+" sue_ROLL_STABILIZATION_RUDDER:"+sue_ROLL_STABILIZATION_RUDDER+" sue_PITCH_STABILIZATION:"+sue_PITCH_STABILIZATION+" sue_YAW_STABILIZATION_RUDDER:"+sue_YAW_STABILIZATION_RUDDER+" sue_YAW_STABILIZATION_AILERON:"+sue_YAW_STABILIZATION_AILERON+" sue_AILERON_NAVIGATION:"+sue_AILERON_NAVIGATION+" sue_RUDDER_NAVIGATION:"+sue_RUDDER_NAVIGATION+" sue_ALTITUDEHOLD_STABILIZED:"+sue_ALTITUDEHOLD_STABILIZED+" sue_ALTITUDEHOLD_WAYPOINT:"+sue_ALTITUDEHOLD_WAYPOINT+" sue_RACING_MODE:"+sue_RACING_MODE+"";
    }

    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_SERIAL_UDB_EXTRA_F4";
    }
}
        