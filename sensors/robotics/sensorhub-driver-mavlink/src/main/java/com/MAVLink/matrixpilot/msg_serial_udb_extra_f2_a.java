/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE SERIAL_UDB_EXTRA_F2_A PACKING
package com.MAVLink.matrixpilot;

import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.Description;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
import com.MAVLink.Messages.Units;

/**
 * Backwards compatible MAVLink version of SERIAL_UDB_EXTRA - F2: Format Part A
 */
public class msg_serial_udb_extra_f2_a extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_SERIAL_UDB_EXTRA_F2_A = 170;
    public static final int MAVLINK_MSG_LENGTH = 61;
    private static final long serialVersionUID = MAVLINK_MSG_ID_SERIAL_UDB_EXTRA_F2_A;

    
    /**
     * Serial UDB Extra Time
     */
    @Description("Serial UDB Extra Time")
    @Units("")
    public long sue_time;
    
    /**
     * Serial UDB Extra Latitude
     */
    @Description("Serial UDB Extra Latitude")
    @Units("")
    public int sue_latitude;
    
    /**
     * Serial UDB Extra Longitude
     */
    @Description("Serial UDB Extra Longitude")
    @Units("")
    public int sue_longitude;
    
    /**
     * Serial UDB Extra Altitude
     */
    @Description("Serial UDB Extra Altitude")
    @Units("")
    public int sue_altitude;
    
    /**
     * Serial UDB Extra Waypoint Index
     */
    @Description("Serial UDB Extra Waypoint Index")
    @Units("")
    public int sue_waypoint_index;
    
    /**
     * Serial UDB Extra Rmat 0
     */
    @Description("Serial UDB Extra Rmat 0")
    @Units("")
    public short sue_rmat0;
    
    /**
     * Serial UDB Extra Rmat 1
     */
    @Description("Serial UDB Extra Rmat 1")
    @Units("")
    public short sue_rmat1;
    
    /**
     * Serial UDB Extra Rmat 2
     */
    @Description("Serial UDB Extra Rmat 2")
    @Units("")
    public short sue_rmat2;
    
    /**
     * Serial UDB Extra Rmat 3
     */
    @Description("Serial UDB Extra Rmat 3")
    @Units("")
    public short sue_rmat3;
    
    /**
     * Serial UDB Extra Rmat 4
     */
    @Description("Serial UDB Extra Rmat 4")
    @Units("")
    public short sue_rmat4;
    
    /**
     * Serial UDB Extra Rmat 5
     */
    @Description("Serial UDB Extra Rmat 5")
    @Units("")
    public short sue_rmat5;
    
    /**
     * Serial UDB Extra Rmat 6
     */
    @Description("Serial UDB Extra Rmat 6")
    @Units("")
    public short sue_rmat6;
    
    /**
     * Serial UDB Extra Rmat 7
     */
    @Description("Serial UDB Extra Rmat 7")
    @Units("")
    public short sue_rmat7;
    
    /**
     * Serial UDB Extra Rmat 8
     */
    @Description("Serial UDB Extra Rmat 8")
    @Units("")
    public short sue_rmat8;
    
    /**
     * Serial UDB Extra GPS Course Over Ground
     */
    @Description("Serial UDB Extra GPS Course Over Ground")
    @Units("")
    public int sue_cog;
    
    /**
     * Serial UDB Extra Speed Over Ground
     */
    @Description("Serial UDB Extra Speed Over Ground")
    @Units("")
    public short sue_sog;
    
    /**
     * Serial UDB Extra CPU Load
     */
    @Description("Serial UDB Extra CPU Load")
    @Units("")
    public int sue_cpu_load;
    
    /**
     * Serial UDB Extra 3D IMU Air Speed
     */
    @Description("Serial UDB Extra 3D IMU Air Speed")
    @Units("")
    public int sue_air_speed_3DIMU;
    
    /**
     * Serial UDB Extra Estimated Wind 0
     */
    @Description("Serial UDB Extra Estimated Wind 0")
    @Units("")
    public short sue_estimated_wind_0;
    
    /**
     * Serial UDB Extra Estimated Wind 1
     */
    @Description("Serial UDB Extra Estimated Wind 1")
    @Units("")
    public short sue_estimated_wind_1;
    
    /**
     * Serial UDB Extra Estimated Wind 2
     */
    @Description("Serial UDB Extra Estimated Wind 2")
    @Units("")
    public short sue_estimated_wind_2;
    
    /**
     * Serial UDB Extra Magnetic Field Earth 0 
     */
    @Description("Serial UDB Extra Magnetic Field Earth 0 ")
    @Units("")
    public short sue_magFieldEarth0;
    
    /**
     * Serial UDB Extra Magnetic Field Earth 1 
     */
    @Description("Serial UDB Extra Magnetic Field Earth 1 ")
    @Units("")
    public short sue_magFieldEarth1;
    
    /**
     * Serial UDB Extra Magnetic Field Earth 2 
     */
    @Description("Serial UDB Extra Magnetic Field Earth 2 ")
    @Units("")
    public short sue_magFieldEarth2;
    
    /**
     * Serial UDB Extra Number of Satellites in View
     */
    @Description("Serial UDB Extra Number of Satellites in View")
    @Units("")
    public short sue_svs;
    
    /**
     * Serial UDB Extra GPS Horizontal Dilution of Precision
     */
    @Description("Serial UDB Extra GPS Horizontal Dilution of Precision")
    @Units("")
    public short sue_hdop;
    
    /**
     * Serial UDB Extra Status
     */
    @Description("Serial UDB Extra Status")
    @Units("")
    public short sue_status;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = sysid;
        packet.compid = compid;
        packet.msgid = MAVLINK_MSG_ID_SERIAL_UDB_EXTRA_F2_A;

        packet.payload.putUnsignedInt(sue_time);
        packet.payload.putInt(sue_latitude);
        packet.payload.putInt(sue_longitude);
        packet.payload.putInt(sue_altitude);
        packet.payload.putUnsignedShort(sue_waypoint_index);
        packet.payload.putShort(sue_rmat0);
        packet.payload.putShort(sue_rmat1);
        packet.payload.putShort(sue_rmat2);
        packet.payload.putShort(sue_rmat3);
        packet.payload.putShort(sue_rmat4);
        packet.payload.putShort(sue_rmat5);
        packet.payload.putShort(sue_rmat6);
        packet.payload.putShort(sue_rmat7);
        packet.payload.putShort(sue_rmat8);
        packet.payload.putUnsignedShort(sue_cog);
        packet.payload.putShort(sue_sog);
        packet.payload.putUnsignedShort(sue_cpu_load);
        packet.payload.putUnsignedShort(sue_air_speed_3DIMU);
        packet.payload.putShort(sue_estimated_wind_0);
        packet.payload.putShort(sue_estimated_wind_1);
        packet.payload.putShort(sue_estimated_wind_2);
        packet.payload.putShort(sue_magFieldEarth0);
        packet.payload.putShort(sue_magFieldEarth1);
        packet.payload.putShort(sue_magFieldEarth2);
        packet.payload.putShort(sue_svs);
        packet.payload.putShort(sue_hdop);
        packet.payload.putUnsignedByte(sue_status);
        
        if (isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a serial_udb_extra_f2_a message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();

        this.sue_time = payload.getUnsignedInt();
        this.sue_latitude = payload.getInt();
        this.sue_longitude = payload.getInt();
        this.sue_altitude = payload.getInt();
        this.sue_waypoint_index = payload.getUnsignedShort();
        this.sue_rmat0 = payload.getShort();
        this.sue_rmat1 = payload.getShort();
        this.sue_rmat2 = payload.getShort();
        this.sue_rmat3 = payload.getShort();
        this.sue_rmat4 = payload.getShort();
        this.sue_rmat5 = payload.getShort();
        this.sue_rmat6 = payload.getShort();
        this.sue_rmat7 = payload.getShort();
        this.sue_rmat8 = payload.getShort();
        this.sue_cog = payload.getUnsignedShort();
        this.sue_sog = payload.getShort();
        this.sue_cpu_load = payload.getUnsignedShort();
        this.sue_air_speed_3DIMU = payload.getUnsignedShort();
        this.sue_estimated_wind_0 = payload.getShort();
        this.sue_estimated_wind_1 = payload.getShort();
        this.sue_estimated_wind_2 = payload.getShort();
        this.sue_magFieldEarth0 = payload.getShort();
        this.sue_magFieldEarth1 = payload.getShort();
        this.sue_magFieldEarth2 = payload.getShort();
        this.sue_svs = payload.getShort();
        this.sue_hdop = payload.getShort();
        this.sue_status = payload.getUnsignedByte();
        
        if (isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_serial_udb_extra_f2_a() {
        this.msgid = MAVLINK_MSG_ID_SERIAL_UDB_EXTRA_F2_A;
    }

    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_serial_udb_extra_f2_a( long sue_time, int sue_latitude, int sue_longitude, int sue_altitude, int sue_waypoint_index, short sue_rmat0, short sue_rmat1, short sue_rmat2, short sue_rmat3, short sue_rmat4, short sue_rmat5, short sue_rmat6, short sue_rmat7, short sue_rmat8, int sue_cog, short sue_sog, int sue_cpu_load, int sue_air_speed_3DIMU, short sue_estimated_wind_0, short sue_estimated_wind_1, short sue_estimated_wind_2, short sue_magFieldEarth0, short sue_magFieldEarth1, short sue_magFieldEarth2, short sue_svs, short sue_hdop, short sue_status) {
        this.msgid = MAVLINK_MSG_ID_SERIAL_UDB_EXTRA_F2_A;

        this.sue_time = sue_time;
        this.sue_latitude = sue_latitude;
        this.sue_longitude = sue_longitude;
        this.sue_altitude = sue_altitude;
        this.sue_waypoint_index = sue_waypoint_index;
        this.sue_rmat0 = sue_rmat0;
        this.sue_rmat1 = sue_rmat1;
        this.sue_rmat2 = sue_rmat2;
        this.sue_rmat3 = sue_rmat3;
        this.sue_rmat4 = sue_rmat4;
        this.sue_rmat5 = sue_rmat5;
        this.sue_rmat6 = sue_rmat6;
        this.sue_rmat7 = sue_rmat7;
        this.sue_rmat8 = sue_rmat8;
        this.sue_cog = sue_cog;
        this.sue_sog = sue_sog;
        this.sue_cpu_load = sue_cpu_load;
        this.sue_air_speed_3DIMU = sue_air_speed_3DIMU;
        this.sue_estimated_wind_0 = sue_estimated_wind_0;
        this.sue_estimated_wind_1 = sue_estimated_wind_1;
        this.sue_estimated_wind_2 = sue_estimated_wind_2;
        this.sue_magFieldEarth0 = sue_magFieldEarth0;
        this.sue_magFieldEarth1 = sue_magFieldEarth1;
        this.sue_magFieldEarth2 = sue_magFieldEarth2;
        this.sue_svs = sue_svs;
        this.sue_hdop = sue_hdop;
        this.sue_status = sue_status;
        
    }

    /**
     * Constructor for a new message, initializes everything
     */
    public msg_serial_udb_extra_f2_a( long sue_time, int sue_latitude, int sue_longitude, int sue_altitude, int sue_waypoint_index, short sue_rmat0, short sue_rmat1, short sue_rmat2, short sue_rmat3, short sue_rmat4, short sue_rmat5, short sue_rmat6, short sue_rmat7, short sue_rmat8, int sue_cog, short sue_sog, int sue_cpu_load, int sue_air_speed_3DIMU, short sue_estimated_wind_0, short sue_estimated_wind_1, short sue_estimated_wind_2, short sue_magFieldEarth0, short sue_magFieldEarth1, short sue_magFieldEarth2, short sue_svs, short sue_hdop, short sue_status, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_SERIAL_UDB_EXTRA_F2_A;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.sue_time = sue_time;
        this.sue_latitude = sue_latitude;
        this.sue_longitude = sue_longitude;
        this.sue_altitude = sue_altitude;
        this.sue_waypoint_index = sue_waypoint_index;
        this.sue_rmat0 = sue_rmat0;
        this.sue_rmat1 = sue_rmat1;
        this.sue_rmat2 = sue_rmat2;
        this.sue_rmat3 = sue_rmat3;
        this.sue_rmat4 = sue_rmat4;
        this.sue_rmat5 = sue_rmat5;
        this.sue_rmat6 = sue_rmat6;
        this.sue_rmat7 = sue_rmat7;
        this.sue_rmat8 = sue_rmat8;
        this.sue_cog = sue_cog;
        this.sue_sog = sue_sog;
        this.sue_cpu_load = sue_cpu_load;
        this.sue_air_speed_3DIMU = sue_air_speed_3DIMU;
        this.sue_estimated_wind_0 = sue_estimated_wind_0;
        this.sue_estimated_wind_1 = sue_estimated_wind_1;
        this.sue_estimated_wind_2 = sue_estimated_wind_2;
        this.sue_magFieldEarth0 = sue_magFieldEarth0;
        this.sue_magFieldEarth1 = sue_magFieldEarth1;
        this.sue_magFieldEarth2 = sue_magFieldEarth2;
        this.sue_svs = sue_svs;
        this.sue_hdop = sue_hdop;
        this.sue_status = sue_status;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_serial_udb_extra_f2_a(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_SERIAL_UDB_EXTRA_F2_A;

        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

                                                          
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_SERIAL_UDB_EXTRA_F2_A - sysid:"+sysid+" compid:"+compid+" sue_time:"+sue_time+" sue_latitude:"+sue_latitude+" sue_longitude:"+sue_longitude+" sue_altitude:"+sue_altitude+" sue_waypoint_index:"+sue_waypoint_index+" sue_rmat0:"+sue_rmat0+" sue_rmat1:"+sue_rmat1+" sue_rmat2:"+sue_rmat2+" sue_rmat3:"+sue_rmat3+" sue_rmat4:"+sue_rmat4+" sue_rmat5:"+sue_rmat5+" sue_rmat6:"+sue_rmat6+" sue_rmat7:"+sue_rmat7+" sue_rmat8:"+sue_rmat8+" sue_cog:"+sue_cog+" sue_sog:"+sue_sog+" sue_cpu_load:"+sue_cpu_load+" sue_air_speed_3DIMU:"+sue_air_speed_3DIMU+" sue_estimated_wind_0:"+sue_estimated_wind_0+" sue_estimated_wind_1:"+sue_estimated_wind_1+" sue_estimated_wind_2:"+sue_estimated_wind_2+" sue_magFieldEarth0:"+sue_magFieldEarth0+" sue_magFieldEarth1:"+sue_magFieldEarth1+" sue_magFieldEarth2:"+sue_magFieldEarth2+" sue_svs:"+sue_svs+" sue_hdop:"+sue_hdop+" sue_status:"+sue_status+"";
    }

    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_SERIAL_UDB_EXTRA_F2_A";
    }
}
        