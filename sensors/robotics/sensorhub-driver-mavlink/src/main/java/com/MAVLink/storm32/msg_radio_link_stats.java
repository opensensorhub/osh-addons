/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE RADIO_LINK_STATS PACKING
package com.MAVLink.storm32;

import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.Description;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
import com.MAVLink.Messages.Units;

/**
 * Radio link statistics. Should be emitted only by components with component id MAV_COMP_ID_TELEMETRY_RADIO. Per default, rssi values are in MAVLink units: 0 represents weakest signal, 254 represents maximum signal; can be changed to dBm with the flag RADIO_LINK_STATS_FLAGS_RSSI_DBM.
 */
public class msg_radio_link_stats extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_RADIO_LINK_STATS = 60046;
    public static final int MAVLINK_MSG_LENGTH = 15;
    private static final long serialVersionUID = MAVLINK_MSG_ID_RADIO_LINK_STATS;

    
    /**
     * Radio link statistics flags.
     */
    @Description("Radio link statistics flags.")
    @Units("")
    public short flags;
    
    /**
     * Values: 0..100. UINT8_MAX: invalid/unknown.
     */
    @Description("Values: 0..100. UINT8_MAX: invalid/unknown.")
    @Units("c%")
    public short rx_LQ;
    
    /**
     * Rssi of antenna1. UINT8_MAX: invalid/unknown.
     */
    @Description("Rssi of antenna1. UINT8_MAX: invalid/unknown.")
    @Units("")
    public short rx_rssi1;
    
    /**
     * Noise on antenna1. Radio dependent. INT8_MAX: invalid/unknown.
     */
    @Description("Noise on antenna1. Radio dependent. INT8_MAX: invalid/unknown.")
    @Units("")
    public byte rx_snr1;
    
    /**
     * Rssi of antenna2. UINT8_MAX: ignore/unknown, use rx_rssi1.
     */
    @Description("Rssi of antenna2. UINT8_MAX: ignore/unknown, use rx_rssi1.")
    @Units("")
    public short rx_rssi2;
    
    /**
     * Noise on antenna2. Radio dependent. INT8_MAX: ignore/unknown, use rx_snr1.
     */
    @Description("Noise on antenna2. Radio dependent. INT8_MAX: ignore/unknown, use rx_snr1.")
    @Units("")
    public byte rx_snr2;
    
    /**
     * 0: antenna1, 1: antenna2, UINT8_MAX: ignore, no Rx receive diversity, use rx_rssi1, rx_snr1.
     */
    @Description("0: antenna1, 1: antenna2, UINT8_MAX: ignore, no Rx receive diversity, use rx_rssi1, rx_snr1.")
    @Units("")
    public short rx_receive_antenna;
    
    /**
     * 0: antenna1, 1: antenna2, UINT8_MAX: ignore, no Rx transmit diversity.
     */
    @Description("0: antenna1, 1: antenna2, UINT8_MAX: ignore, no Rx transmit diversity.")
    @Units("")
    public short rx_transmit_antenna;
    
    /**
     * Values: 0..100. UINT8_MAX: invalid/unknown.
     */
    @Description("Values: 0..100. UINT8_MAX: invalid/unknown.")
    @Units("c%")
    public short tx_LQ;
    
    /**
     * Rssi of antenna1. UINT8_MAX: invalid/unknown.
     */
    @Description("Rssi of antenna1. UINT8_MAX: invalid/unknown.")
    @Units("")
    public short tx_rssi1;
    
    /**
     * Noise on antenna1. Radio dependent. INT8_MAX: invalid/unknown.
     */
    @Description("Noise on antenna1. Radio dependent. INT8_MAX: invalid/unknown.")
    @Units("")
    public byte tx_snr1;
    
    /**
     * Rssi of antenna2. UINT8_MAX: ignore/unknown, use tx_rssi1.
     */
    @Description("Rssi of antenna2. UINT8_MAX: ignore/unknown, use tx_rssi1.")
    @Units("")
    public short tx_rssi2;
    
    /**
     * Noise on antenna2. Radio dependent. INT8_MAX: ignore/unknown, use tx_snr1.
     */
    @Description("Noise on antenna2. Radio dependent. INT8_MAX: ignore/unknown, use tx_snr1.")
    @Units("")
    public byte tx_snr2;
    
    /**
     * 0: antenna1, 1: antenna2, UINT8_MAX: ignore, no Tx receive diversity, use tx_rssi1, tx_snr1.
     */
    @Description("0: antenna1, 1: antenna2, UINT8_MAX: ignore, no Tx receive diversity, use tx_rssi1, tx_snr1.")
    @Units("")
    public short tx_receive_antenna;
    
    /**
     * 0: antenna1, 1: antenna2, UINT8_MAX: ignore, no Tx transmit diversity.
     */
    @Description("0: antenna1, 1: antenna2, UINT8_MAX: ignore, no Tx transmit diversity.")
    @Units("")
    public short tx_transmit_antenna;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = sysid;
        packet.compid = compid;
        packet.msgid = MAVLINK_MSG_ID_RADIO_LINK_STATS;

        packet.payload.putUnsignedByte(flags);
        packet.payload.putUnsignedByte(rx_LQ);
        packet.payload.putUnsignedByte(rx_rssi1);
        packet.payload.putByte(rx_snr1);
        packet.payload.putUnsignedByte(rx_rssi2);
        packet.payload.putByte(rx_snr2);
        packet.payload.putUnsignedByte(rx_receive_antenna);
        packet.payload.putUnsignedByte(rx_transmit_antenna);
        packet.payload.putUnsignedByte(tx_LQ);
        packet.payload.putUnsignedByte(tx_rssi1);
        packet.payload.putByte(tx_snr1);
        packet.payload.putUnsignedByte(tx_rssi2);
        packet.payload.putByte(tx_snr2);
        packet.payload.putUnsignedByte(tx_receive_antenna);
        packet.payload.putUnsignedByte(tx_transmit_antenna);
        
        if (isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a radio_link_stats message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();

        this.flags = payload.getUnsignedByte();
        this.rx_LQ = payload.getUnsignedByte();
        this.rx_rssi1 = payload.getUnsignedByte();
        this.rx_snr1 = payload.getByte();
        this.rx_rssi2 = payload.getUnsignedByte();
        this.rx_snr2 = payload.getByte();
        this.rx_receive_antenna = payload.getUnsignedByte();
        this.rx_transmit_antenna = payload.getUnsignedByte();
        this.tx_LQ = payload.getUnsignedByte();
        this.tx_rssi1 = payload.getUnsignedByte();
        this.tx_snr1 = payload.getByte();
        this.tx_rssi2 = payload.getUnsignedByte();
        this.tx_snr2 = payload.getByte();
        this.tx_receive_antenna = payload.getUnsignedByte();
        this.tx_transmit_antenna = payload.getUnsignedByte();
        
        if (isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_radio_link_stats() {
        this.msgid = MAVLINK_MSG_ID_RADIO_LINK_STATS;
    }

    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_radio_link_stats( short flags, short rx_LQ, short rx_rssi1, byte rx_snr1, short rx_rssi2, byte rx_snr2, short rx_receive_antenna, short rx_transmit_antenna, short tx_LQ, short tx_rssi1, byte tx_snr1, short tx_rssi2, byte tx_snr2, short tx_receive_antenna, short tx_transmit_antenna) {
        this.msgid = MAVLINK_MSG_ID_RADIO_LINK_STATS;

        this.flags = flags;
        this.rx_LQ = rx_LQ;
        this.rx_rssi1 = rx_rssi1;
        this.rx_snr1 = rx_snr1;
        this.rx_rssi2 = rx_rssi2;
        this.rx_snr2 = rx_snr2;
        this.rx_receive_antenna = rx_receive_antenna;
        this.rx_transmit_antenna = rx_transmit_antenna;
        this.tx_LQ = tx_LQ;
        this.tx_rssi1 = tx_rssi1;
        this.tx_snr1 = tx_snr1;
        this.tx_rssi2 = tx_rssi2;
        this.tx_snr2 = tx_snr2;
        this.tx_receive_antenna = tx_receive_antenna;
        this.tx_transmit_antenna = tx_transmit_antenna;
        
    }

    /**
     * Constructor for a new message, initializes everything
     */
    public msg_radio_link_stats( short flags, short rx_LQ, short rx_rssi1, byte rx_snr1, short rx_rssi2, byte rx_snr2, short rx_receive_antenna, short rx_transmit_antenna, short tx_LQ, short tx_rssi1, byte tx_snr1, short tx_rssi2, byte tx_snr2, short tx_receive_antenna, short tx_transmit_antenna, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_RADIO_LINK_STATS;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.flags = flags;
        this.rx_LQ = rx_LQ;
        this.rx_rssi1 = rx_rssi1;
        this.rx_snr1 = rx_snr1;
        this.rx_rssi2 = rx_rssi2;
        this.rx_snr2 = rx_snr2;
        this.rx_receive_antenna = rx_receive_antenna;
        this.rx_transmit_antenna = rx_transmit_antenna;
        this.tx_LQ = tx_LQ;
        this.tx_rssi1 = tx_rssi1;
        this.tx_snr1 = tx_snr1;
        this.tx_rssi2 = tx_rssi2;
        this.tx_snr2 = tx_snr2;
        this.tx_receive_antenna = tx_receive_antenna;
        this.tx_transmit_antenna = tx_transmit_antenna;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_radio_link_stats(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_RADIO_LINK_STATS;

        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

                                  
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_RADIO_LINK_STATS - sysid:"+sysid+" compid:"+compid+" flags:"+flags+" rx_LQ:"+rx_LQ+" rx_rssi1:"+rx_rssi1+" rx_snr1:"+rx_snr1+" rx_rssi2:"+rx_rssi2+" rx_snr2:"+rx_snr2+" rx_receive_antenna:"+rx_receive_antenna+" rx_transmit_antenna:"+rx_transmit_antenna+" tx_LQ:"+tx_LQ+" tx_rssi1:"+tx_rssi1+" tx_snr1:"+tx_snr1+" tx_rssi2:"+tx_rssi2+" tx_snr2:"+tx_snr2+" tx_receive_antenna:"+tx_receive_antenna+" tx_transmit_antenna:"+tx_transmit_antenna+"";
    }

    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_RADIO_LINK_STATS";
    }
}
        