/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

package com.MAVLink.enums;

/**
 * Battery status flags for fault, health and state indication.
 */
public class MAV_BATTERY_STATUS_FLAGS {
   public static final int MAV_BATTERY_STATUS_FLAGS_NOT_READY_TO_USE = 1; /* 
          The battery is not ready to use (fly).
          Set if the battery has faults or other conditions that make it unsafe to fly with.
          Note: It will be the logical OR of other status bits (chosen by the manufacturer/integrator).
         | */
   public static final int MAV_BATTERY_STATUS_FLAGS_CHARGING = 2; /* 
          Battery is charging.
         | */
   public static final int MAV_BATTERY_STATUS_FLAGS_CELL_BALANCING = 4; /* 
          Battery is cell balancing (during charging).
          Not ready to use (MAV_BATTERY_STATUS_FLAGS_NOT_READY_TO_USE may be set).
         | */
   public static final int MAV_BATTERY_STATUS_FLAGS_FAULT_CELL_IMBALANCE = 8; /* 
          Battery cells are not balanced.
          Not ready to use.
         | */
   public static final int MAV_BATTERY_STATUS_FLAGS_AUTO_DISCHARGING = 16; /* 
          Battery is auto discharging (towards storage level).
          Not ready to use (MAV_BATTERY_STATUS_FLAGS_NOT_READY_TO_USE would be set).
         | */
   public static final int MAV_BATTERY_STATUS_FLAGS_REQUIRES_SERVICE = 32; /* 
          Battery requires service (not safe to fly). 
          This is set at vendor discretion.
          It is likely to be set for most faults, and may also be set according to a maintenance schedule (such as age, or number of recharge cycles, etc.).
         | */
   public static final int MAV_BATTERY_STATUS_FLAGS_BAD_BATTERY = 64; /* 
          Battery is faulty and cannot be repaired (not safe to fly). 
          This is set at vendor discretion.
          The battery should be disposed of safely.
         | */
   public static final int MAV_BATTERY_STATUS_FLAGS_PROTECTIONS_ENABLED = 128; /* 
          Automatic battery protection monitoring is enabled.
          When enabled, the system will monitor for certain kinds of faults, such as cells being over-voltage.
          If a fault is triggered then and protections are enabled then a safety fault (MAV_BATTERY_STATUS_FLAGS_FAULT_PROTECTION_SYSTEM) will be set and power from the battery will be stopped.
          Note that battery protection monitoring should only be enabled when the vehicle is landed. Once the vehicle is armed, or starts moving, the protections should be disabled to prevent false positives from disabling the output.
         | */
   public static final int MAV_BATTERY_STATUS_FLAGS_FAULT_PROTECTION_SYSTEM = 256; /* 
          The battery fault protection system had detected a fault and cut all power from the battery.
          This will only trigger if MAV_BATTERY_STATUS_FLAGS_PROTECTIONS_ENABLED is set.
          Other faults like MAV_BATTERY_STATUS_FLAGS_FAULT_OVER_VOLT may also be set, indicating the cause of the protection fault.
         | */
   public static final int MAV_BATTERY_STATUS_FLAGS_FAULT_OVER_VOLT = 512; /* One or more cells are above their maximum voltage rating. | */
   public static final int MAV_BATTERY_STATUS_FLAGS_FAULT_UNDER_VOLT = 1024; /* 
          One or more cells are below their minimum voltage rating.
          A battery that had deep-discharged might be irrepairably damaged, and set both MAV_BATTERY_STATUS_FLAGS_FAULT_UNDER_VOLT and MAV_BATTERY_STATUS_FLAGS_BAD_BATTERY.
         | */
   public static final int MAV_BATTERY_STATUS_FLAGS_FAULT_OVER_TEMPERATURE = 2048; /* Over-temperature fault. | */
   public static final int MAV_BATTERY_STATUS_FLAGS_FAULT_UNDER_TEMPERATURE = 4096; /* Under-temperature fault. | */
   public static final int MAV_BATTERY_STATUS_FLAGS_FAULT_OVER_CURRENT = 8192; /* Over-current fault. | */
   public static final int MAV_BATTERY_STATUS_FLAGS_FAULT_SHORT_CIRCUIT = 16384; /* 
          Short circuit event detected.
          The battery may or may not be safe to use (check other flags).
         | */
   public static final int MAV_BATTERY_STATUS_FLAGS_FAULT_INCOMPATIBLE_VOLTAGE = 32768; /* Voltage not compatible with power rail voltage (batteries on same power rail should have similar voltage). | */
   public static final int MAV_BATTERY_STATUS_FLAGS_FAULT_INCOMPATIBLE_FIRMWARE = 65536; /* Battery firmware is not compatible with current autopilot firmware. | */
   public static final int MAV_BATTERY_STATUS_FLAGS_FAULT_INCOMPATIBLE_CELLS_CONFIGURATION = 131072; /* Battery is not compatible due to cell configuration (e.g. 5s1p when vehicle requires 6s). | */
   public static final int MAV_BATTERY_STATUS_FLAGS_CAPACITY_RELATIVE_TO_FULL = 262144; /* 
          Battery capacity_consumed and capacity_remaining values are relative to a full battery (they sum to the total capacity of the battery).
          This flag would be set for a smart battery that can accurately determine its remaining charge across vehicle reboots and discharge/recharge cycles.
          If unset the capacity_consumed indicates the consumption since vehicle power-on, as measured using a power monitor. The capacity_remaining, if provided, indicates the estimated remaining capacity on the assumption that the battery was full on vehicle boot.
          If unset a GCS is recommended to advise that users fully charge the battery on power on.
         | */
   public static final int MAV_BATTERY_STATUS_FLAGS_EXTENDED = 4294967295; /* Reserved (not used). If set, this will indicate that an additional status field exists for higher status values. | */
   public static final int MAV_BATTERY_STATUS_FLAGS_ENUM_END = 4294967296; /*  | */
}
            