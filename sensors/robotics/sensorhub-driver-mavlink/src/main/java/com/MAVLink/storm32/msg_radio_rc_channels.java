/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE RADIO_RC_CHANNELS PACKING
package com.MAVLink.storm32;

import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.Description;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
import com.MAVLink.Messages.Units;

/**
 * Radio channels. Supports up to 24 channels. Channel values are in centerd 13 bit format. Range is [-4096,4096], center is 0. Conversion to PWM is x * 5/32 + 1500. Should be emitted only by components with component id MAV_COMP_ID_TELEMETRY_RADIO.
 */
public class msg_radio_rc_channels extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_RADIO_RC_CHANNELS = 60045;
    public static final int MAVLINK_MSG_LENGTH = 50;
    private static final long serialVersionUID = MAVLINK_MSG_ID_RADIO_RC_CHANNELS;

    
    /**
     * Total number of RC channels being received. This can be larger than 24, indicating that more channels are available but not given in this message.
     */
    @Description("Total number of RC channels being received. This can be larger than 24, indicating that more channels are available but not given in this message.")
    @Units("")
    public short count;
    
    /**
     * Radio channels status flags.
     */
    @Description("Radio channels status flags.")
    @Units("")
    public short flags;
    
    /**
     * RC channels. Channels above count should be set to 0, to benefit from MAVLink's zero padding.
     */
    @Description("RC channels. Channels above count should be set to 0, to benefit from MAVLink's zero padding.")
    @Units("")
    public short channels[] = new short[24];
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = sysid;
        packet.compid = compid;
        packet.msgid = MAVLINK_MSG_ID_RADIO_RC_CHANNELS;

        packet.payload.putUnsignedByte(count);
        packet.payload.putUnsignedByte(flags);
        
        if (isMavlink2) {
             
        for (int i = 0; i < channels.length; i++) {
            packet.payload.putShort(channels[i]);
        }
                    
            
        }
        return packet;
    }

    /**
     * Decode a radio_rc_channels message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();

        this.count = payload.getUnsignedByte();
        this.flags = payload.getUnsignedByte();
        
        if (isMavlink2) {
             
        for (int i = 0; i < this.channels.length; i++) {
            this.channels[i] = payload.getShort();
        }
                
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_radio_rc_channels() {
        this.msgid = MAVLINK_MSG_ID_RADIO_RC_CHANNELS;
    }

    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_radio_rc_channels( short count, short flags, short[] channels) {
        this.msgid = MAVLINK_MSG_ID_RADIO_RC_CHANNELS;

        this.count = count;
        this.flags = flags;
        this.channels = channels;
        
    }

    /**
     * Constructor for a new message, initializes everything
     */
    public msg_radio_rc_channels( short count, short flags, short[] channels, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_RADIO_RC_CHANNELS;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.count = count;
        this.flags = flags;
        this.channels = channels;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_radio_rc_channels(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_RADIO_RC_CHANNELS;

        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

          
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_RADIO_RC_CHANNELS - sysid:"+sysid+" compid:"+compid+" count:"+count+" flags:"+flags+" channels:"+channels+"";
    }

    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_RADIO_RC_CHANNELS";
    }
}
        