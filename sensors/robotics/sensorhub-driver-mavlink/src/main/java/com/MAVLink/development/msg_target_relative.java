/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE TARGET_RELATIVE PACKING
package com.MAVLink.development;

import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.Description;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
import com.MAVLink.Messages.Units;

/**
 * The location of a target measured by MAV's onboard sensors. 
 */
public class msg_target_relative extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_TARGET_RELATIVE = 511;
    public static final int MAVLINK_MSG_LENGTH = 71;
    private static final long serialVersionUID = MAVLINK_MSG_ID_TARGET_RELATIVE;

    
    /**
     * Timestamp (UNIX epoch time)
     */
    @Description("Timestamp (UNIX epoch time)")
    @Units("us")
    public long timestamp;
    
    /**
     * X Position of the target in TARGET_OBS_FRAME
     */
    @Description("X Position of the target in TARGET_OBS_FRAME")
    @Units("m")
    public float x;
    
    /**
     * Y Position of the target in TARGET_OBS_FRAME
     */
    @Description("Y Position of the target in TARGET_OBS_FRAME")
    @Units("m")
    public float y;
    
    /**
     * Z Position of the target in TARGET_OBS_FRAME
     */
    @Description("Z Position of the target in TARGET_OBS_FRAME")
    @Units("m")
    public float z;
    
    /**
     * Standard deviation of the target's position in TARGET_OBS_FRAME
     */
    @Description("Standard deviation of the target's position in TARGET_OBS_FRAME")
    @Units("m")
    public float pos_std[] = new float[3];
    
    /**
     * Standard deviation of the target's orientation in TARGET_OBS_FRAME
     */
    @Description("Standard deviation of the target's orientation in TARGET_OBS_FRAME")
    @Units("rad")
    public float yaw_std;
    
    /**
     * Quaternion of the target's orientation from the target's frame to the TARGET_OBS_FRAME (w, x, y, z order, zero-rotation is 1, 0, 0, 0)
     */
    @Description("Quaternion of the target's orientation from the target's frame to the TARGET_OBS_FRAME (w, x, y, z order, zero-rotation is 1, 0, 0, 0)")
    @Units("")
    public float q_target[] = new float[4];
    
    /**
     * Quaternion of the sensor's orientation from TARGET_OBS_FRAME to vehicle-carried NED. (Ignored if set to (0,0,0,0)) (w, x, y, z order, zero-rotation is 1, 0, 0, 0)
     */
    @Description("Quaternion of the sensor's orientation from TARGET_OBS_FRAME to vehicle-carried NED. (Ignored if set to (0,0,0,0)) (w, x, y, z order, zero-rotation is 1, 0, 0, 0)")
    @Units("")
    public float q_sensor[] = new float[4];
    
    /**
     * The ID of the target if multiple targets are present
     */
    @Description("The ID of the target if multiple targets are present")
    @Units("")
    public short id;
    
    /**
     * Coordinate frame used for following fields.
     */
    @Description("Coordinate frame used for following fields.")
    @Units("")
    public short frame;
    
    /**
     * Type of target
     */
    @Description("Type of target")
    @Units("")
    public short type;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = sysid;
        packet.compid = compid;
        packet.msgid = MAVLINK_MSG_ID_TARGET_RELATIVE;

        packet.payload.putUnsignedLong(timestamp);
        packet.payload.putFloat(x);
        packet.payload.putFloat(y);
        packet.payload.putFloat(z);
        
        for (int i = 0; i < pos_std.length; i++) {
            packet.payload.putFloat(pos_std[i]);
        }
                    
        packet.payload.putFloat(yaw_std);
        
        for (int i = 0; i < q_target.length; i++) {
            packet.payload.putFloat(q_target[i]);
        }
                    
        
        for (int i = 0; i < q_sensor.length; i++) {
            packet.payload.putFloat(q_sensor[i]);
        }
                    
        packet.payload.putUnsignedByte(id);
        packet.payload.putUnsignedByte(frame);
        packet.payload.putUnsignedByte(type);
        
        if (isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a target_relative message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();

        this.timestamp = payload.getUnsignedLong();
        this.x = payload.getFloat();
        this.y = payload.getFloat();
        this.z = payload.getFloat();
        
        for (int i = 0; i < this.pos_std.length; i++) {
            this.pos_std[i] = payload.getFloat();
        }
                
        this.yaw_std = payload.getFloat();
        
        for (int i = 0; i < this.q_target.length; i++) {
            this.q_target[i] = payload.getFloat();
        }
                
        
        for (int i = 0; i < this.q_sensor.length; i++) {
            this.q_sensor[i] = payload.getFloat();
        }
                
        this.id = payload.getUnsignedByte();
        this.frame = payload.getUnsignedByte();
        this.type = payload.getUnsignedByte();
        
        if (isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_target_relative() {
        this.msgid = MAVLINK_MSG_ID_TARGET_RELATIVE;
    }

    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_target_relative( long timestamp, float x, float y, float z, float[] pos_std, float yaw_std, float[] q_target, float[] q_sensor, short id, short frame, short type) {
        this.msgid = MAVLINK_MSG_ID_TARGET_RELATIVE;

        this.timestamp = timestamp;
        this.x = x;
        this.y = y;
        this.z = z;
        this.pos_std = pos_std;
        this.yaw_std = yaw_std;
        this.q_target = q_target;
        this.q_sensor = q_sensor;
        this.id = id;
        this.frame = frame;
        this.type = type;
        
    }

    /**
     * Constructor for a new message, initializes everything
     */
    public msg_target_relative( long timestamp, float x, float y, float z, float[] pos_std, float yaw_std, float[] q_target, float[] q_sensor, short id, short frame, short type, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_TARGET_RELATIVE;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.timestamp = timestamp;
        this.x = x;
        this.y = y;
        this.z = z;
        this.pos_std = pos_std;
        this.yaw_std = yaw_std;
        this.q_target = q_target;
        this.q_sensor = q_sensor;
        this.id = id;
        this.frame = frame;
        this.type = type;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_target_relative(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_TARGET_RELATIVE;

        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

                          
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_TARGET_RELATIVE - sysid:"+sysid+" compid:"+compid+" timestamp:"+timestamp+" x:"+x+" y:"+y+" z:"+z+" pos_std:"+pos_std+" yaw_std:"+yaw_std+" q_target:"+q_target+" q_sensor:"+q_sensor+" id:"+id+" frame:"+frame+" type:"+type+"";
    }

    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_TARGET_RELATIVE";
    }
}
        