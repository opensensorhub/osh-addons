/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE SERIAL_UDB_EXTRA_F14 PACKING
package com.MAVLink.matrixpilot;

import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.Description;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
import com.MAVLink.Messages.Units;

/**
 * Backwards compatible version of SERIAL_UDB_EXTRA F14: format
 */
public class msg_serial_udb_extra_f14 extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_SERIAL_UDB_EXTRA_F14 = 178;
    public static final int MAVLINK_MSG_LENGTH = 17;
    private static final long serialVersionUID = MAVLINK_MSG_ID_SERIAL_UDB_EXTRA_F14;

    
    /**
     * Serial UDB Extra Type Program Address of Last Trap
     */
    @Description("Serial UDB Extra Type Program Address of Last Trap")
    @Units("")
    public long sue_TRAP_SOURCE;
    
    /**
     * Serial UDB Extra Reboot Register of DSPIC
     */
    @Description("Serial UDB Extra Reboot Register of DSPIC")
    @Units("")
    public short sue_RCON;
    
    /**
     * Serial UDB Extra  Last dspic Trap Flags
     */
    @Description("Serial UDB Extra  Last dspic Trap Flags")
    @Units("")
    public short sue_TRAP_FLAGS;
    
    /**
     * Serial UDB Extra Number of Ocillator Failures
     */
    @Description("Serial UDB Extra Number of Ocillator Failures")
    @Units("")
    public short sue_osc_fail_count;
    
    /**
     * Serial UDB Extra Wind Estimation Enabled
     */
    @Description("Serial UDB Extra Wind Estimation Enabled")
    @Units("")
    public short sue_WIND_ESTIMATION;
    
    /**
     * Serial UDB Extra Type of GPS Unit
     */
    @Description("Serial UDB Extra Type of GPS Unit")
    @Units("")
    public short sue_GPS_TYPE;
    
    /**
     * Serial UDB Extra Dead Reckoning Enabled
     */
    @Description("Serial UDB Extra Dead Reckoning Enabled")
    @Units("")
    public short sue_DR;
    
    /**
     * Serial UDB Extra Type of UDB Hardware
     */
    @Description("Serial UDB Extra Type of UDB Hardware")
    @Units("")
    public short sue_BOARD_TYPE;
    
    /**
     * Serial UDB Extra Type of Airframe
     */
    @Description("Serial UDB Extra Type of Airframe")
    @Units("")
    public short sue_AIRFRAME;
    
    /**
     * Serial UDB Extra UDB Internal Clock Configuration
     */
    @Description("Serial UDB Extra UDB Internal Clock Configuration")
    @Units("")
    public short sue_CLOCK_CONFIG;
    
    /**
     * Serial UDB Extra Type of Flight Plan
     */
    @Description("Serial UDB Extra Type of Flight Plan")
    @Units("")
    public short sue_FLIGHT_PLAN_TYPE;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = sysid;
        packet.compid = compid;
        packet.msgid = MAVLINK_MSG_ID_SERIAL_UDB_EXTRA_F14;

        packet.payload.putUnsignedInt(sue_TRAP_SOURCE);
        packet.payload.putShort(sue_RCON);
        packet.payload.putShort(sue_TRAP_FLAGS);
        packet.payload.putShort(sue_osc_fail_count);
        packet.payload.putUnsignedByte(sue_WIND_ESTIMATION);
        packet.payload.putUnsignedByte(sue_GPS_TYPE);
        packet.payload.putUnsignedByte(sue_DR);
        packet.payload.putUnsignedByte(sue_BOARD_TYPE);
        packet.payload.putUnsignedByte(sue_AIRFRAME);
        packet.payload.putUnsignedByte(sue_CLOCK_CONFIG);
        packet.payload.putUnsignedByte(sue_FLIGHT_PLAN_TYPE);
        
        if (isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a serial_udb_extra_f14 message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();

        this.sue_TRAP_SOURCE = payload.getUnsignedInt();
        this.sue_RCON = payload.getShort();
        this.sue_TRAP_FLAGS = payload.getShort();
        this.sue_osc_fail_count = payload.getShort();
        this.sue_WIND_ESTIMATION = payload.getUnsignedByte();
        this.sue_GPS_TYPE = payload.getUnsignedByte();
        this.sue_DR = payload.getUnsignedByte();
        this.sue_BOARD_TYPE = payload.getUnsignedByte();
        this.sue_AIRFRAME = payload.getUnsignedByte();
        this.sue_CLOCK_CONFIG = payload.getUnsignedByte();
        this.sue_FLIGHT_PLAN_TYPE = payload.getUnsignedByte();
        
        if (isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_serial_udb_extra_f14() {
        this.msgid = MAVLINK_MSG_ID_SERIAL_UDB_EXTRA_F14;
    }

    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_serial_udb_extra_f14( long sue_TRAP_SOURCE, short sue_RCON, short sue_TRAP_FLAGS, short sue_osc_fail_count, short sue_WIND_ESTIMATION, short sue_GPS_TYPE, short sue_DR, short sue_BOARD_TYPE, short sue_AIRFRAME, short sue_CLOCK_CONFIG, short sue_FLIGHT_PLAN_TYPE) {
        this.msgid = MAVLINK_MSG_ID_SERIAL_UDB_EXTRA_F14;

        this.sue_TRAP_SOURCE = sue_TRAP_SOURCE;
        this.sue_RCON = sue_RCON;
        this.sue_TRAP_FLAGS = sue_TRAP_FLAGS;
        this.sue_osc_fail_count = sue_osc_fail_count;
        this.sue_WIND_ESTIMATION = sue_WIND_ESTIMATION;
        this.sue_GPS_TYPE = sue_GPS_TYPE;
        this.sue_DR = sue_DR;
        this.sue_BOARD_TYPE = sue_BOARD_TYPE;
        this.sue_AIRFRAME = sue_AIRFRAME;
        this.sue_CLOCK_CONFIG = sue_CLOCK_CONFIG;
        this.sue_FLIGHT_PLAN_TYPE = sue_FLIGHT_PLAN_TYPE;
        
    }

    /**
     * Constructor for a new message, initializes everything
     */
    public msg_serial_udb_extra_f14( long sue_TRAP_SOURCE, short sue_RCON, short sue_TRAP_FLAGS, short sue_osc_fail_count, short sue_WIND_ESTIMATION, short sue_GPS_TYPE, short sue_DR, short sue_BOARD_TYPE, short sue_AIRFRAME, short sue_CLOCK_CONFIG, short sue_FLIGHT_PLAN_TYPE, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_SERIAL_UDB_EXTRA_F14;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.sue_TRAP_SOURCE = sue_TRAP_SOURCE;
        this.sue_RCON = sue_RCON;
        this.sue_TRAP_FLAGS = sue_TRAP_FLAGS;
        this.sue_osc_fail_count = sue_osc_fail_count;
        this.sue_WIND_ESTIMATION = sue_WIND_ESTIMATION;
        this.sue_GPS_TYPE = sue_GPS_TYPE;
        this.sue_DR = sue_DR;
        this.sue_BOARD_TYPE = sue_BOARD_TYPE;
        this.sue_AIRFRAME = sue_AIRFRAME;
        this.sue_CLOCK_CONFIG = sue_CLOCK_CONFIG;
        this.sue_FLIGHT_PLAN_TYPE = sue_FLIGHT_PLAN_TYPE;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_serial_udb_extra_f14(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_SERIAL_UDB_EXTRA_F14;

        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

                          
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_SERIAL_UDB_EXTRA_F14 - sysid:"+sysid+" compid:"+compid+" sue_TRAP_SOURCE:"+sue_TRAP_SOURCE+" sue_RCON:"+sue_RCON+" sue_TRAP_FLAGS:"+sue_TRAP_FLAGS+" sue_osc_fail_count:"+sue_osc_fail_count+" sue_WIND_ESTIMATION:"+sue_WIND_ESTIMATION+" sue_GPS_TYPE:"+sue_GPS_TYPE+" sue_DR:"+sue_DR+" sue_BOARD_TYPE:"+sue_BOARD_TYPE+" sue_AIRFRAME:"+sue_AIRFRAME+" sue_CLOCK_CONFIG:"+sue_CLOCK_CONFIG+" sue_FLIGHT_PLAN_TYPE:"+sue_FLIGHT_PLAN_TYPE+"";
    }

    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_SERIAL_UDB_EXTRA_F14";
    }
}
        